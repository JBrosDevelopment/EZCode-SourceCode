semi class str 
{
    explicit alias string
    explicit typeof => EZCodeLanguage.EZCode.DataType("string")
    explicit watch "(.*? {text})" => set : text
    explicit params => set : PARAMS
    undefined Value
    get => @str 
    {
        return Value
    }
    get => @int 
    {
        return runexec => EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, int
    }
    method set : text 
    {
        Value => format : text
    }
    nocol method = : @str:text => @str 
    {
        return set : text
    }
    nocol method + : @str:text
    {
        Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {text}, +
    }
    nocol method - : @str:text 
    {
        Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {text}, -
    }
    nocol method * : @str:text 
    {
        Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {text}, *
    }
    nocol method / : @str:text 
    {
        Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {text}, /
    }
    static method format : @str:text => @str
    {
        return runexec EZCodeLanguage.EZHelp.Format ~> {text}
    }
}

////


make for {TYPE} {I1} {VAL}, {I2} {COMP} {NUM}, {I3} {METHOD} {ADD} \{ => {
	{TYPE} {I1} new : ({VAL} - 1)
	loop {I2} {COMP} {NUM} \{
	{I3} {METHOD} {ADD}
}

// this means,
for var i 0, i < 10, i + 1 {
	// code...
}

// turns into,
var i -1
loop i < 10 {
	i + 1
	// code...
}

//

undefined index => runexec EZCodeLanguage.EZHelp.ObjectParse ~> 0, int
loop true {
	index => runexec EZCodeLanguage.EZHelp.Add ~> {index}, 1
	loop 2 {
		runexec EZCodeLanguage.EZHelp.Print ~> {index}
	}
	if runexec EZCodeLanguage.EZHelp.Compare ~> {index}, >, 9 : yield break
	runexec EZCodeLanguage.EZHelp.Print ~> -
}

//


    make var {NAME} => var {NAME} new :
    static class reflect {
        static method do : @str:does {
            runexec => 'does'
        }
        static method any : @str:does => @var {
            return runexec => 'does'
        }
        static method int : @str:does => @int {
            return runexec => 'does'
        }
        static method str : @str:does => @str {
            return runexec => 'does'
        }
        static method float : @str:does => @float {
            return runexec => 'does'
        }
        static method bool : @str:does => @bool {
            return runexec => 'does'
        }
    }
    class var {
        explicit params {val} => set : val
        undefined Value
        method set : val {
            Value = val
        }
        get => @str {
            return reflection str : EZCodeLanguage.EZHelp.String.Parse ~> 'Value'
        }
        get => @int {
            return reflection int : EZCodeLanguage.EZHelp.Int.Parse ~> 'Value'
        }
        nocol method = : val {
            if val is @int : Value => AsInt : val
            elif val is @str : Value => AsStr : val
        }
        static method AsInt : val => @int {
            return reflection int : EZCodeLanguage.EZHelp.Int.Parse ~> 'val'
        }
        static method AsStr : val => @str {
            return reflection int : EZCodeLanguage.EZHelp.String.Parse ~> 'val'
        }
        nocol method == : val => @bool {
            return reflection bool : EZCodeLanguage.EZHelp.Bool.Equals ~> 'Value', 'val'
        }
    }
    semi class str {
        explicit typeof => EZCodeLanguage.EZCode.DataType("string")
        explicit watch ""(.*? {text})"" => set : text
        explicit watch .*?'(.* {text})'.*? => set : text
        var Value \!
        method set : text {
            Value => format : text
        }
        static method format : @str:text => @str {
            return reflection str : EZCode.EZHelp.String.Format ~> 'text'
        }
    }
    class int {
        explicit typeof => EZCodeLanguage.EZCode.DataType("int")
        var Value 0
        method set : val {
            Value = val
        }
    }
    class bool {
        explicit typeof => EZCodeLanguage.EZCode.DataType("bool")
        var Value false
        method set : val {
            Value = val
        }
    }
    static ontop class ONTOP { 
        nocol method print : @str:text {
            reflection do : EZCodeLanguage.EZHelp.Print ~> 'text'
        }
        nocol method stop : @int:endcode {
            reflection do : EZCodeLanguage.EZHelp.Stop ~> 'endcode'
        }
    }

    method Main {
        var index 10
        var text ""this\_is\_some\_text""
        if index == 10 {
            print TEXT='text'
        }
    }



make var {Name} => var {Name} new :
semi class var {
    explicit override params {val} => set : val
    undefined Value
    method set : val => @var {
        Value = val
        return Value
    }
    nocol method = : val => @var {
        return runexec => EZCodeLanguage.EZHelp.ObjectParse ~> {val}, var
    }
    get => @str {
        return runexec => EZCodeLanguage.EZHelp.StringParse ~> {Value}
    }
}
semi class str {
    explicit typeof => EZCodeLanguage.EZCode.DataType("string")
    explicit watch .*?'(.* {text})'.*? => set : text
    explicit watch ""(.*? {text})"" => set : text
    explicit watch \! => setEmpty
    var Value \!
    method setEmpty {
        Value => EZCodeLanguage.EZHelp.StringEmpty
    }
    method set : text => @str {
        Value => parse : text
        return Value
    }
    static method parse : val => @str {
        return runexec => EZCodeLanguage.EZHelp.StringParse ~> {val}
    }
    static method format : @str:text => @str {
        return runexec => EZCodeLanguage.EZHelp.Format ~> {text}
    }
}
nocol method print : @str:text {
    runexec => EZCodeLanguage.EZHelp.Print ~> {text}
}

var value This\_'1'\cis\\n\!some'text'
print 'value'