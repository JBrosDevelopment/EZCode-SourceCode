make ^var {Name} {VALUE} => var {Name} new : {VALUE}
make ^int {NAME} {VALUE} => int {NAME} new : {VALUE}
make ^float {NAME} {VALUE} => float {NAME} new : {VALUE}
make ^bool {NAME} {VALUE} => bool {NAME} new : {VALUE}
make ^str {NAME} {VALUE} => str {NAME} new : {VALUE}
make ^global {TYPE} {NAME} {VALUE} => global {TYPE} {NAME} new : {VALUE}

make {
    ^for {TYPE} {I1} {VAL}, {I2} {COMP} {NUM}, {I3} {METHOD} {ADD} 
    \{ 
} => {
    {TYPE} {I1} new : ({VAL} - 1)
	loop {I2} {COMP} {NUM} \{
	{I3} {METHOD} {ADD}
}
make ^for {TYPE} {I1} {VAL}, {I2} {COMP} {NUM}, {I3} {METHOD} {ADD} \{ => {
    {TYPE} {I1} new : ({VAL} - 1)
	loop {I2} {COMP} {NUM} \{
	{I3} {METHOD} {ADD}
}

global var test 20

method Start {

    for var i 0, i < test, i + 1 {
        print '(i + 1)'\; '(i * i * i)'
    }

    bool result (test < 50)
    if result {
        print result
    }
    other
}

method other {
    test * 150
    print other 'test'
}