class var {
    explicit params => set : PARAMS
    undefined Value
    method set : val {
        = val
    }
    nocol method = : val {
        Value => runexec EZCodeLanguage.EZHelp.ObjectParse ~> {val}, str
    }
    nocol method + : val {
        try {
            Value => runexec EZCodeLanguage.EZHelp.Add ~> {Value}, {val}
        }
        fail {
            Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {val}, +
        }
    }
    nocol method - : val {
        try {
            Value => runexec EZCodeLanguage.EZHelp.Subtract ~> {Value}, {val}
        }
        fail {
            Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {val}, -
        }
    }
    nocol method * : val {
        try {
            Value => runexec EZCodeLanguage.EZHelp.Multiply ~> {Value}, {val}
        }
        fail {
            Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {val}, *
        }
    }
    nocol method / : val {
        try {
            Value => runexec EZCodeLanguage.EZHelp.Divide ~> {Value}, {val}
        }
        fail {
            Value => runexec EZCodeLanguage.EZHelp.StringMod ~> {Value}, {val}, /
        }
    }
    get => @str {
        return Value
    }
    get => @bool {
        return runexec EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, bool
    }
    get => @int {
        return runexec EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, int
    }
    get => @float {
        return runexec EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, float
    }
}