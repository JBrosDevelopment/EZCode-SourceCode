semi class float {
    explicit typeof => EZCodeLanguage.EZCode.DataType("float")
    explicit params => set : PARAMS
    undefined Value
    get => @float {
        return Value
    }
    get => @int {
        return Value
    }
    get => @str {
        return runexec => EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, str
    }
    method set : @float:num {
        = num
    }
    nocol method = : @float:val {
        Value => runexec EZCodeLanguage.EZHelp.ObjectParse ~> {val}, float
    }
    nocol method + : @float:val {
        Value => runexec EZCodeLanguage.EZHelp.Add ~> {Value}, {val}
    }
    nocol method - : @float:val {
        Value => runexec EZCodeLanguage.EZHelp.Subtract ~> {Value}, {val}
    }
    nocol method * : @float:val {
        Value => runexec EZCodeLanguage.EZHelp.Multiply ~> {Value}, {val}
    }
    nocol method / : @float:val {
        Value => runexec EZCodeLanguage.EZHelp.Divide ~> {Value}, {val}
    }
}

nocol method print : text {
    runexec EZCodeLanguage.EZHelp.Print ~> {text}
}

class operations {
    explicit watch \((.* {EXP})\) => operate : EXP
    undefined Value
    method operate : vals {
        Value => runexec EZCodeLanguage.EZHelp.Operate ~> {vals}
    }
    get @float {
        return Value
    }
}

/*
class expressions {
    explicit watch \?\((.* {EXP})\)\? => expression : EXP
    undefined Value
    method operate : vals {
        Value => runexec EZCodeLanguage.EZHelp.Evaluate ~> {vals}
    }
    get @bool {
        return Value
    }
}
*/

float main new : 50
float sub new : 10
float result new

result = (main - sub)

print 'main'-'sub'='result'