semi class int 
{
    explicit typeof => EZCodeLanguage.EZCode.DataType("int")
    explicit params => set : PARAMS
    undefined Value
    get => @int 
    {
        return Value
    }
    get => @str 
    {
        return runexec => EZCodeLanguage.EZHelp.ObjectParse ~> {Value}, str
    }
    method set : @int:num 
    {
        Value => runexec EZCodeLanguage.EZHelp.ObjectParse ~> {num}, int
    }
    nocol method + : @int:val
    {
        Value => runexec EZCodeLanguage.EZHelp.Add ~> {Value}, {val}
    }
    nocol method - : @int:val
    {
        Value => runexec EZCodeLanguage.EZHelp.Subtract ~> {Value}, {val}
    }
    nocol method * : @int:val
    {
        Value => runexec EZCodeLanguage.EZHelp.Multiply ~> {Value}, {val}
    }
    nocol method / : @int:val
    {
        Value => runexec EZCodeLanguage.EZHelp.Divide ~> {Value}, {val}
    }
}

nocol method print : @str:text 
{
    runexec EZCodeLanguage.EZHelp.Print ~> {text}
}

int number new : 50
int ten new : 10

number + ten

print number